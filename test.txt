```
-- Tables.sql
-- Tabela 1: StarSystems
DROP TABLE IF EXISTS StarSystems CASCADE;
CREATE TABLE StarSystems (
    system_id      SERIAL PRIMARY KEY,
    system_name    VARCHAR(100) NOT NULL UNIQUE,
    coord_x        NUMERIC(8,2) NOT NULL,
    coord_y        NUMERIC(8,2) NOT NULL,
    coord_z        NUMERIC(8,2) NOT NULL,
    star_type      VARCHAR(50) NOT NULL
);

-- Tabela 2: Planets
DROP TABLE IF EXISTS Planets CASCADE;
CREATE TABLE Planets (
    planet_id     SERIAL PRIMARY KEY,
    planet_name   VARCHAR(100) NOT NULL UNIQUE,
    planet_type   VARCHAR(50) NOT NULL,
    planet_size   NUMERIC(10,2),
    population    BIGINT,
    is_populated  BOOLEAN NOT NULL DEFAULT FALSE,
    system_id     INT NOT NULL REFERENCES StarSystems(system_id) ON DELETE CASCADE
);

-- Tabela 3: Factions
DROP TABLE IF EXISTS Factions CASCADE;
CREATE TABLE Factions (
    faction_id    SERIAL PRIMARY KEY,
    faction_name  VARCHAR(100) NOT NULL UNIQUE,
    government    VARCHAR(50),
    influence     NUMERIC(5,2) DEFAULT 0.0
);

-- Tabela 4: Stations
DROP TABLE IF EXISTS Stations CASCADE;
CREATE TABLE Stations (
    station_id          SERIAL PRIMARY KEY,
    station_name        VARCHAR(100) NOT NULL UNIQUE,
    station_type        VARCHAR(100) NOT NULL,
    system_id           INT REFERENCES StarSystems(system_id) ON DELETE CASCADE,
    planet_id           INT REFERENCES Planets(planet_id) ON DELETE SET NULL,
    controlling_faction INT REFERENCES Factions(faction_id) ON DELETE SET NULL
);

-- Tabela 5: Players
DROP TABLE IF EXISTS Players CASCADE;
CREATE TABLE Players (
    player_id       SERIAL PRIMARY KEY,
    player_name     VARCHAR(50) NOT NULL UNIQUE,
    credits         NUMERIC(18,2) NOT NULL DEFAULT 1000.00
);

-- Tabela 6: Ships (rodzic)
DROP TABLE IF EXISTS Ships CASCADE;
CREATE TABLE Ships (
    ship_id         SERIAL,
    model_name      VARCHAR(100) NOT NULL,
    max_speed       INT NOT NULL,
    cargo_capacity  INT NOT NULL,
    jump_range      NUMERIC(5,2) NOT NULL DEFAULT 10.0,
    current_system  INT REFERENCES StarSystems(system_id) ON DELETE SET NULL,
    current_station INT REFERENCES Stations(station_id) ON DELETE SET NULL,
    is_destroyed    BOOLEAN NOT NULL DEFAULT FALSE
);
ALTER TABLE ONLY Ships
  ADD CONSTRAINT ships_pkey PRIMARY KEY (ship_id);

-- Tabela 6a: PlayerShips (dziedziczy z Ships)
DROP TABLE IF EXISTS PlayerShips CASCADE;
CREATE TABLE PlayerShips (
    owner_player_id INT NOT NULL REFERENCES Players(player_id) ON DELETE CASCADE
)
INHERITS (Ships);
ALTER TABLE ONLY PlayerShips
  ADD CONSTRAINT player_ships_pkey PRIMARY KEY (ship_id);

-- Tabela 6b: NPCShips (dziedziczy z Ships)
DROP TABLE IF EXISTS NPCShips CASCADE;
CREATE TABLE NPCShips (
    faction_id INT REFERENCES Factions(faction_id) ON DELETE SET NULL,
    npc_name   VARCHAR(100)
)
INHERITS (Ships);
ALTER TABLE ONLY NPCShips
  ADD CONSTRAINT npc_ships_pkey PRIMARY KEY (ship_id);

-- Tabela 7: Goods
DROP TABLE IF EXISTS Goods CASCADE;
CREATE TABLE Goods (
    good_id       SERIAL PRIMARY KEY,
    good_name     VARCHAR(100) NOT NULL UNIQUE,
    category      VARCHAR(50) NOT NULL,
    base_price    NUMERIC(10,2) NOT NULL
);

-- Tabela 8: ShipCargo
DROP TABLE IF EXISTS ShipCargo CASCADE;
CREATE TABLE ShipCargo (
    ship_id   INT NOT NULL,
    good_id   INT NOT NULL REFERENCES Goods(good_id) ON DELETE CASCADE,
    quantity  INT NOT NULL DEFAULT 0 CHECK (quantity >= 0),
    PRIMARY KEY (ship_id, good_id)
);

-- Tabela 9: Deals
DROP TABLE IF EXISTS Deals CASCADE;
CREATE TABLE Deals (
    deal_id         SERIAL PRIMARY KEY,
    player_id       INT REFERENCES Players(player_id) ON DELETE CASCADE,
    station_id      INT REFERENCES Stations(station_id) ON DELETE CASCADE,
    good_id         INT REFERENCES Goods(good_id) ON DELETE RESTRICT,
    quantity        INT NOT NULL CHECK (quantity > 0),
    price_per_unit  NUMERIC(10,2) NOT NULL,
    deal_type       VARCHAR(4) NOT NULL CHECK (deal_type IN ('BUY','SELL')),
    deal_timestamp  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    ship_id         INT  -- bedzie weryfikowany przez trigger
);

-- Tabela 10: Missions
DROP TYPE IF EXISTS mission_status_enum CASCADE;
CREATE TYPE mission_status_enum AS ENUM ('Open','InProgress','Failed','Completed');
DROP TABLE IF EXISTS Missions CASCADE;
CREATE TABLE Missions (
    mission_id         SERIAL PRIMARY KEY,
    mission_type       VARCHAR(50) NOT NULL,
    reward             NUMERIC(10,2) NOT NULL,
    assigned_player    INT REFERENCES Players(player_id) ON DELETE SET NULL,
    status             mission_status_enum DEFAULT 'Open',
    target_station_id  INT REFERENCES Stations(station_id) ON DELETE CASCADE,
    required_good_id   INT REFERENCES Goods(good_id) ON DELETE RESTRICT,
    required_qty       INT NOT NULL DEFAULT 0
);

-- Tabela 11: RouteEdges
DROP TABLE IF EXISTS RouteEdges CASCADE;
CREATE TABLE RouteEdges (
    edge_id     SERIAL PRIMARY KEY,
    system_from INT NOT NULL REFERENCES StarSystems(system_id),
    system_to   INT NOT NULL REFERENCES StarSystems(system_id),
    distance_ly NUMERIC(8,2) NOT NULL CHECK (distance_ly > 0)
);

-- Tabela 12: ShipUpgrades
DROP TABLE IF EXISTS ShipUpgrades CASCADE;
CREATE TABLE ShipUpgrades (
    upgrade_id   SERIAL PRIMARY KEY,
    ship_id      INT NOT NULL REFERENCES Ships(ship_id) ON DELETE CASCADE,
    module_name  VARCHAR(100) NOT NULL,
    module_level INT NOT NULL DEFAULT 1
);

-- Tabela 13: Achievements
DROP TABLE IF EXISTS Achievements CASCADE;
CREATE TABLE Achievements (
    achievement_id   SERIAL PRIMARY KEY,
    achievement_name VARCHAR(100) NOT NULL UNIQUE
);

-- Tabela 14: PlayerAchievements
DROP TABLE IF EXISTS PlayerAchievements CASCADE;
CREATE TABLE PlayerAchievements (
    player_id       INT NOT NULL REFERENCES Players(player_id) ON DELETE CASCADE,
    achievement_id  INT NOT NULL REFERENCES Achievements(achievement_id) ON DELETE CASCADE,
    awarded_on      TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (player_id, achievement_id)
);

-- Tabela 15: Logs
DROP TABLE IF EXISTS Logs CASCADE;
CREATE TABLE Logs (
    log_id      SERIAL PRIMARY KEY,
    event_type  VARCHAR(100),
    description TEXT,
    created_at  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
```

```
-- Triggers.sql

------------------------------------------------------------------------------
-- Trigger 1: trg_deals_after_insert
-- Uruchamiany po INSERT na Deals; sprawdza kredyty, ladunek i loguje transakcje
CREATE OR REPLACE FUNCTION trg_deals_after_insert()
RETURNS TRIGGER
LANGUAGE plpgsql AS $$
DECLARE
    playerBalance NUMERIC(18,2);
    totalCost     NUMERIC(18,2);
    currentCargo  INT;
    capacityLeft  INT;
    maxCap        INT;
BEGIN
    SELECT credits INTO playerBalance FROM Players WHERE player_id = NEW.player_id;
    IF NOT FOUND THEN
        RAISE EXCEPTION 'Gracz % nie zostal znaleziony!', NEW.player_id;
    END IF;
    IF NEW.ship_id IS NULL THEN
        RAISE EXCEPTION 'Brak statku dla tej transakcji!';
    END IF;
    SELECT cargo_capacity INTO maxCap FROM Ships WHERE ship_id = NEW.ship_id;
    IF NOT FOUND THEN
        RAISE EXCEPTION 'Statek % nie istnieje!', NEW.ship_id;
    END IF;
    totalCost := NEW.price_per_unit * NEW.quantity;
    IF NEW.deal_type = 'BUY' THEN
        IF playerBalance < totalCost THEN
            RAISE EXCEPTION 'Niewystarczajace kredyty do zakupu!';
        END IF;
        SELECT COALESCE(SUM(quantity),0) INTO currentCargo FROM ShipCargo WHERE ship_id = NEW.ship_id;
        capacityLeft := maxCap - currentCargo;
        IF capacityLeft < NEW.quantity THEN
            RAISE EXCEPTION 'Niewystarczajaca pojemnosc statku %! Pozostalo=%, potrzebne=%', NEW.ship_id, capacityLeft, NEW.quantity;
        END IF;
        UPDATE Players SET credits = credits - totalCost WHERE player_id = NEW.player_id;
        PERFORM fn_add_cargo(NEW.ship_id, NEW.good_id, NEW.quantity);
        INSERT INTO Logs(event_type, description)
        VALUES('BUY', 'Gracz '||NEW.player_id||' kupil '||NEW.quantity||' jednostek towaru '||NEW.good_id||' dla statku '||NEW.ship_id);
    ELSIF NEW.deal_type = 'SELL' THEN
        PERFORM fn_remove_cargo(NEW.ship_id, NEW.good_id, NEW.quantity);
        UPDATE Players SET credits = credits + totalCost WHERE player_id = NEW.player_id;
        INSERT INTO Logs(event_type, description)
        VALUES('SELL', 'Gracz '||NEW.player_id||' sprzedal '||NEW.quantity||' jednostek towaru '||NEW.good_id||' dla statku '||NEW.ship_id);
    END IF;
    RETURN NEW;
END;
$$;

DROP TRIGGER IF EXISTS deals_after_insert ON Deals;
CREATE TRIGGER deals_after_insert
AFTER INSERT ON Deals
FOR EACH ROW
EXECUTE FUNCTION trg_deals_after_insert();

------------------------------------------------------------------------------
-- Trigger 2: trg_ship_destroyed_log
-- Loguje, gdy statek zostanie zniszczony
CREATE OR REPLACE FUNCTION trg_ship_destroyed_log()
RETURNS TRIGGER
LANGUAGE plpgsql AS $$
BEGIN
    IF NEW.is_destroyed = TRUE AND OLD.is_destroyed = FALSE THEN
        INSERT INTO Logs(event_type, description)
        VALUES('SHIP_DESTROYED', 'Statek '||NEW.ship_id||' zostal zniszczony.');
    END IF;
    RETURN NEW;
END;
$$;

DROP TRIGGER IF EXISTS ship_destroyed_trigger ON Ships;
CREATE TRIGGER ship_destroyed_trigger
AFTER UPDATE ON Ships
FOR EACH ROW
EXECUTE FUNCTION trg_ship_destroyed_log();

------------------------------------------------------------------------------
-- Trigger 3: trg_check_player_name
-- Sprawdza, czy player_name zawiera tylko dozwolone znaki (alphanumeryczne oraz _)
CREATE OR REPLACE FUNCTION trg_check_player_name()
RETURNS TRIGGER
LANGUAGE plpgsql AS $$
BEGIN
    IF NEW.player_name ~ '[^a-zA-Z0-9_]' THEN
        RAISE EXCEPTION 'player_name zawiera niedozwolone znaki. Dozwolone: a-z, A-Z, 0-9, _';
    END IF;
    RETURN NEW;
END;
$$;

DROP TRIGGER IF EXISTS check_player_name_trigger ON Players;
CREATE TRIGGER check_player_name_trigger
BEFORE INSERT OR UPDATE ON Players
FOR EACH ROW
EXECUTE FUNCTION trg_check_player_name();

------------------------------------------------------------------------------
-- Trigger 4: trg_gph_insert_log
-- Loguje zmiane ceny towaru
CREATE OR REPLACE FUNCTION trg_gph_insert_log()
RETURNS TRIGGER
LANGUAGE plpgsql AS $$
BEGIN
    INSERT INTO Logs(event_type, description)
    VALUES('PRICE_UPDATE', 'Stacja='||NEW.station_id||', Towar='||NEW.good_id||', Cena='||NEW.price);
    RETURN NEW;
END;
$$;

DROP TRIGGER IF EXISTS goods_price_history_trigger ON GoodsPriceHistory;
CREATE TRIGGER goods_price_history_trigger
AFTER INSERT ON GoodsPriceHistory
FOR EACH ROW
EXECUTE FUNCTION trg_gph_insert_log();

------------------------------------------------------------------------------
-- Trigger 5: trg_block_delete_open_mission
-- Blokuje usuniecie misji o statusie Open lub InProgress
CREATE OR REPLACE FUNCTION trg_block_delete_open_mission()
RETURNS TRIGGER
LANGUAGE plpgsql AS $$
BEGIN
    IF OLD.status IN ('Open','InProgress') THEN
        RAISE EXCEPTION 'Nie mozna usunac aktywnej misji!';
    END IF;
    RETURN OLD;
END;
$$;

DROP TRIGGER IF EXISTS block_delete_open_mission_trigger ON Missions;
CREATE TRIGGER block_delete_open_mission_trigger
BEFORE DELETE ON Missions
FOR EACH ROW
EXECUTE FUNCTION trg_block_delete_open_mission();

------------------------------------------------------------------------------
-- Trigger 6: trg_validate_ship_id
-- Sprawdza, czy ship_id istnieje w tabeli Ships (uwzglednia dziedziczenie)
CREATE OR REPLACE FUNCTION trg_validate_ship_id()
RETURNS TRIGGER
LANGUAGE plpgsql AS $$
BEGIN
    IF NEW.ship_id IS NULL OR NEW.ship_id <= 0 THEN
        RAISE EXCEPTION 'Niepoprawne ship_id: %', NEW.ship_id;
    END IF;
    IF NOT EXISTS (SELECT 1 FROM Ships WHERE ship_id = NEW.ship_id) THEN
        RAISE EXCEPTION 'Statek o id=% nie istnieje', NEW.ship_id;
    END IF;
    RETURN NEW;
END;
$$;

DROP TRIGGER IF EXISTS validate_ship_in_deals ON Deals;
CREATE TRIGGER validate_ship_in_deals
BEFORE INSERT OR UPDATE ON Deals
FOR EACH ROW
EXECUTE FUNCTION trg_validate_ship_id();

DROP TRIGGER IF EXISTS validate_ship_in_cargo ON ShipCargo;
CREATE TRIGGER validate_ship_in_cargo
BEFORE INSERT OR UPDATE ON ShipCargo
FOR EACH ROW
EXECUTE FUNCTION trg_validate_ship_id();
```

```
-- Views.sql

------------------------------------------------------------------------------
-- View 1: vw_active_players
-- Wyswietla graczy, ktorzy maja wiecej niz 0 kredytow
CREATE OR REPLACE VIEW vw_active_players AS
SELECT player_id, player_name, credits
FROM Players
WHERE credits > 0;

------------------------------------------------------------------------------
-- View 2: vw_stations_with_faction
-- Wyswietla stacje wraz z nazwa frakcji kontrolujacej
CREATE OR REPLACE VIEW vw_stations_with_faction AS
SELECT s.station_id, s.station_name, f.faction_name
FROM Stations s
LEFT JOIN Factions f ON s.controlling_faction = f.faction_id;

------------------------------------------------------------------------------
-- View 3: vw_ships_details
-- Wyswietla szczegoly statkow, laczac dane z PlayerShips i NPCShips
CREATE OR REPLACE VIEW vw_ships_details AS
SELECT
  ps.ship_id,
  ps.model_name,
  ps.max_speed,
  ps.cargo_capacity,
  ps.jump_range,
  ps.current_system,
  ps.current_station,
  ps.is_destroyed,
  'PlayerShip' AS ship_type,
  p.player_name AS owner_or_npc
FROM PlayerShips ps
JOIN Players p ON ps.owner_player_id = p.player_id
UNION ALL
SELECT
  ns.ship_id,
  ns.model_name,
  ns.max_speed,
  ns.cargo_capacity,
  ns.jump_range,
  ns.current_system,
  ns.current_station,
  ns.is_destroyed,
  'NPCShip' AS ship_type,
  f.faction_name AS owner_or_npc
FROM NPCShips ns
LEFT JOIN Factions f ON ns.faction_id = f.faction_id;

------------------------------------------------------------------------------
-- View 4: vw_deals_summary
-- Podsumowanie transakcji
CREATE OR REPLACE VIEW vw_deals_summary AS
SELECT
    d.deal_id,
    pl.player_name,
    st.station_name,
    g.good_name,
    d.quantity,
    d.price_per_unit,
    d.deal_type,
    d.deal_timestamp
FROM Deals d
JOIN Players pl ON d.player_id = pl.player_id
JOIN Stations st ON d.station_id = st.station_id
JOIN Goods g ON d.good_id = g.good_id;

------------------------------------------------------------------------------
-- View 5: vw_goods_prices
-- Ostatnia znana cena towaru dla kazdej stacji
CREATE OR REPLACE VIEW vw_goods_prices AS
SELECT gh.station_id,
       st.station_name,
       gh.good_id,
       g.good_name,
       gh.price,
       gh.changed_on
FROM GoodsPriceHistory gh
JOIN Stations st ON gh.station_id = st.station_id
JOIN Goods g ON gh.good_id = g.good_id
WHERE gh.changed_on = (
    SELECT MAX(g2.changed_on)
    FROM GoodsPriceHistory g2
    WHERE g2.station_id = gh.station_id AND g2.good_id = gh.good_id
);
```

```
-- Inserts.sql

------------------------------------------------------------------------------
-- Przygotowanie danych testowych
TRUNCATE ShipCargo, Deals, PlayerShips, NPCShips, Ships, Stations, Planets,
         StarSystems, Players, Factions, Goods, Missions, RouteEdges, Logs
RESTART IDENTITY CASCADE;

------------------------------------------------------------------------------
-- Inserts 1: StarSystems
INSERT INTO StarSystems(system_name, coord_x, coord_y, coord_z, star_type)
VALUES
  ('Sol', 0, 0, 0, 'G-type'),
  ('AlphaCentauri', 4.3, 0, 0, 'RedDwarf'),
  ('Sirius', 8.6, 1.0, 2.0, 'WhiteDwarf');

------------------------------------------------------------------------------
-- Inserts 2: Planets
INSERT INTO Planets(planet_name, planet_type, planet_size, population, is_populated, system_id)
VALUES
  ('Earth', 'Rocky', 12742, 8000000000, TRUE, 1),
  ('Mars', 'Rocky', 6792, 1000000, TRUE, 1);

------------------------------------------------------------------------------
-- Inserts 3: Factions
INSERT INTO Factions(faction_name, government, influence)
VALUES
  ('Federation', 'Democracy', 25.5),
  ('Empire', 'Monarchy', 15.0);

------------------------------------------------------------------------------
-- Inserts 4: Stations
INSERT INTO Stations(station_name, station_type, system_id, planet_id, controlling_faction)
VALUES
  ('Galactic Hub', 'Orbital', 1, NULL, 1),
  ('Mars Base', 'Surface', 1, 2, 1);

------------------------------------------------------------------------------
-- Inserts 5: Players
INSERT INTO Players(player_name, credits)
VALUES
  ('PlayerOne', 5000),
  ('JohnDoe', 10000),
  ('TestPilot', 2000);

------------------------------------------------------------------------------
-- Inserts 6a: PlayerShips
INSERT INTO PlayerShips(owner_player_id, model_name, max_speed, cargo_capacity, jump_range, current_system, current_station, is_destroyed)
VALUES
  (1, 'Asp Explorer', 250, 32, 15, 1, 1, FALSE)
RETURNING ship_id;

------------------------------------------------------------------------------
-- Inserts 6b: NPCShips
INSERT INTO NPCShips(faction_id, npc_name, model_name, max_speed, cargo_capacity, jump_range, current_system, current_station, is_destroyed)
VALUES
  (2, 'Pirate#1', 'PirateVessel', 180, 16, 10, 1, 1, FALSE);

------------------------------------------------------------------------------
-- Inserts 7: Goods
INSERT INTO Goods(good_name, category, base_price)
VALUES
  ('Food', 'Foodstuffs', 10),
  ('Gold', 'Metals', 1000),
  ('Medicine', 'Pharma', 50);

------------------------------------------------------------------------------
-- Inserts 8: Missions
INSERT INTO Missions(mission_type, reward, assigned_player, target_station_id, required_good_id, required_qty, status)
VALUES
  ('Delivery', 500, 1, 1, 1, 10, 'Open'),
  ('Bounty', 1000, 2, NULL, NULL, 0, 'Open');

------------------------------------------------------------------------------
-- Inserts 9: RouteEdges
INSERT INTO RouteEdges(system_from, system_to, distance_ly)
VALUES
  (1, 2, 5.0),
  (2, 1, 5.0),
  (1, 3, 8.6),
  (3, 1, 8.6),
  (2, 3, 4.5),
  (3, 2, 4.5);

------------------------------------------------------------------------------
-- Inserts 10: Logs
INSERT INTO Logs(event_type, description)
VALUES
  ('INFO', 'Poczatkowy log testowy');
```

```-- FunctionsAndProcedures.sql

------------------------------------------------------------------------------
-- Function 1: func_get_distance
-- Oblicza 3D odleglosc miedzy dwoma systemami
CREATE OR REPLACE FUNCTION func_get_distance(systemA INT, systemB INT)
RETURNS NUMERIC(10,4)
LANGUAGE plpgsql AS $$
DECLARE
    a RECORD;
    b RECORD;
    dist NUMERIC(10,4);
BEGIN
    SELECT coord_x, coord_y, coord_z INTO a FROM StarSystems WHERE system_id = systemA;
    SELECT coord_x, coord_y, coord_z INTO b FROM StarSystems WHERE system_id = systemB;
    IF a IS NULL OR b IS NULL THEN
        RAISE EXCEPTION 'Jeden lub oba systemy nie zostaly znalezione';
    END IF;
    dist := sqrt( power(b.coord_x - a.coord_x,2) +
                  power(b.coord_y - a.coord_y,2) +
                  power(b.coord_z - a.coord_z,2) );
    RETURN dist;
END;
$$;

------------------------------------------------------------------------------
-- Function 2: func_find_path
-- Szuka trasy dla statku, uwzgledniajac jump_range
CREATE OR REPLACE FUNCTION func_find_path(p_systemA INT, p_systemB INT, p_ship_id INT)
RETURNS TEXT
LANGUAGE plpgsql AS $$
DECLARE
    maxJump NUMERIC(8,2);
    currentSystem INT := p_systemA;
    nextSystem INT;
    path TEXT := '';
BEGIN
    SELECT jump_range INTO maxJump FROM Ships WHERE ship_id = p_ship_id;
    IF maxJump IS NULL THEN
        RAISE EXCEPTION 'Ship o id=% is not found', p_ship_id;
    END IF;
    path := 'Start(' || p_systemA || ')';

    LOOP
        IF currentSystem = p_systemB THEN
            EXIT;
        END IF;

        SELECT system_to INTO nextSystem FROM RouteEdges
         WHERE system_from = currentSystem AND distance_ly <= maxJump
         ORDER BY distance_ly LIMIT 1;

        IF nextSystem IS NULL THEN
            RETURN 'No route found';
        END IF;

        path := path || ' -> ' || nextSystem;
        currentSystem := nextSystem;
    END LOOP;

    RETURN path || ' -> End';
END;
$$;

------------------------------------------------------------------------------
-- Function 3: func_calc_player_profit
-- Oblicza czysty zysk gracza (sprzedaz - kupno)
CREATE OR REPLACE FUNCTION func_calc_player_profit(p_player_id INT)
RETURNS NUMERIC(18,2)
LANGUAGE plpgsql AS $$
DECLARE
    total_buy NUMERIC(18,2);
    total_sell NUMERIC(18,2);
BEGIN
    SELECT COALESCE(SUM(price_per_unit * quantity),0)
      INTO total_buy FROM Deals WHERE player_id = p_player_id AND deal_type = 'BUY';
    SELECT COALESCE(SUM(price_per_unit * quantity),0)
      INTO total_sell FROM Deals WHERE player_id = p_player_id AND deal_type = 'SELL';
    RETURN total_sell - total_buy;
END;
$$;

------------------------------------------------------------------------------
-- Function 4: func_upgrade_ship
-- Ulepsza modul statku (zwieksza poziom modulu)
CREATE OR REPLACE FUNCTION func_upgrade_ship(p_ship_id INT, p_module_name VARCHAR)
RETURNS TEXT
LANGUAGE plpgsql AS $$
DECLARE
    existing RECORD;
    new_level INT;
BEGIN
    SELECT * INTO existing FROM ShipUpgrades WHERE ship_id = p_ship_id AND module_name = p_module_name;
    IF NOT FOUND THEN
        INSERT INTO ShipUpgrades(ship_id, module_name, module_level)
        VALUES (p_ship_id, p_module_name, 1);
        RETURN 'Nowy modul "' || p_module_name || '" zainstalowany (poziom 1)';
    ELSE
        new_level := existing.module_level + 1;
        UPDATE ShipUpgrades SET module_level = new_level WHERE upgrade_id = existing.upgrade_id;
        RETURN 'Modul "' || p_module_name || '" ulepszony do poziomu ' || new_level;
    END IF;
END;
$$;

------------------------------------------------------------------------------
-- Function 5: fn_add_cargo
-- Dodaje ladunek do statku; jezeli juz istnieje, zwieksza ilosc
CREATE OR REPLACE FUNCTION fn_add_cargo(p_ship_id INT, p_good_id INT, p_quantity INT)
RETURNS VOID
LANGUAGE plpgsql AS $$
BEGIN
    IF EXISTS (SELECT 1 FROM ShipCargo WHERE ship_id = p_ship_id AND good_id = p_good_id) THEN
        UPDATE ShipCargo SET quantity = quantity + p_quantity WHERE ship_id = p_ship_id AND good_id = p_good_id;
    ELSE
        INSERT INTO ShipCargo(ship_id, good_id, quantity) VALUES (p_ship_id, p_good_id, p_quantity);
    END IF;
END;
$$;

------------------------------------------------------------------------------
-- Function 6: fn_remove_cargo
-- Usuwa ladunek ze statku; rzuca wyjatek, jezeli nie ma wystarczajaco
CREATE OR REPLACE FUNCTION fn_remove_cargo(p_ship_id INT, p_good_id INT, p_quantity INT)
RETURNS VOID
LANGUAGE plpgsql AS $$
DECLARE
    current_qty INT;
BEGIN
    SELECT quantity INTO current_qty FROM ShipCargo WHERE ship_id = p_ship_id AND good_id = p_good_id;
    IF current_qty IS NULL OR current_qty < p_quantity THEN
        RAISE EXCEPTION 'Nie ma wystarczajaco ladunku na statku % dla towaru %', p_ship_id, p_good_id;
    END IF;
    UPDATE ShipCargo SET quantity = quantity - p_quantity WHERE ship_id = p_ship_id AND good_id = p_good_id;
    DELETE FROM ShipCargo WHERE ship_id = p_ship_id AND good_id = p_good_id AND quantity = 0;
END;
$$;

------------------------------------------------------------------------------
-- Procedure 1: proc_generate_random_systems_and_planets
-- Generuje losowe systemy gwiezdne i planety

CREATE OR REPLACE PROCEDURE proc_generate_random_systems_and_planets(p_system_count INT, p_planets_per_system INT)
LANGUAGE plpgsql AS $$
DECLARE
    i INT;
    j INT;
    r INT;
    new_sys_id INT;
    rndX NUMERIC(8,2);
    rndY NUMERIC(8,2);
    rndZ NUMERIC(8,2);
    starType TEXT;
BEGIN
    FOR i IN 1..p_system_count LOOP
        rndX := random() * 1000;
        rndY := random() * 1000;
        rndZ := random() * 1000;
        r := random();
        IF r <= 0.1 THEN
            starType := 'RedDwarf';
        ELSE IF r > 0.1 AND r <= 0.2 THEN
            starType := 'WhiteDwarf';
        ELSE IF r > 0.2 AND r <= 0.3 THEN
            starType := 'YellowDwarf';
        ELSE IF r > 0.3 AND r <= 0.4 THEN
            starType := 'YellowGiant';
        ELSE IF r > 0.4 AND r <= 0.5 THEN
            starType := 'WhiteGiant';
        ELSE IF r > 0.5 AND r <= 0.6 THEN
            starType := 'RedGiant';
        ELSE IF r > 0.6 AND r <= 0.7 THEN
            starType := 'CarbonStarC';
        ELSE IF r > 0.7 AND r <= 0.8 THEN
            starType := 'WhiteSupergiant';
        ELSE IF r > 0.8 AND r <= 0.9 THEN
            starType := 'YellowSupergiant';
        ELSE
            starType := 'RedGiant';
        END IF;
        INSERT INTO StarSystems(system_name, coord_x, coord_y, coord_z, star_type)
         VALUES ('AutoSys_' || i || '_' || floor(random()*1000)::int, rndX, rndY, rndZ, starType)
         RETURNING system_id INTO new_sys_id;
        FOR j IN 1..p_planets_per_system LOOP
            INSERT INTO Planets(planet_name, planet_type, planet_size, population, is_populated, system_id)
             VALUES ('AutoPlanet_' || i || '_' || j || '_' || floor(random()*1000)::int,
                     'Rocky',
                     5000 + floor(random()*1000)::int,
                     (random()*10000000)::BIGINT,
                     (random() < 0.5),
                     new_sys_id);
        END LOOP;
    END LOOP;
END;
$$;

CREATE OR REPLACE PROCEDURE proc_generate_random_systems_and_planets(p_system_count INT, p_planets_per_system INT)
LANGUAGE plpgsql AS $$
DECLARE
    i INT;
    j INT;
    new_sys_id INT;
    rndX NUMERIC(8,2);
    rndY NUMERIC(8,2);
    rndZ NUMERIC(8,2);
    starType TEXT;
BEGIN
    FOR i IN 1..p_system_count LOOP
        rndX := random() * 1000;
        rndY := random() * 1000;
        rndZ := random() * 1000;
        r := random();
        IF r <= 0.1 THEN
            starType := 'RedDwarf';
        ELSE IF r > 0.1 AND r <= 0.2 THEN
            starType := 'WhiteDwarf';
        ELSE IF r > 0.2 AND r <= 0.3 THEN
            starType := 'YellowDwarf';
        ELSE IF r > 0.3 AND r <= 0.4 THEN
            starType := 'YellowGiant';
        ELSE IF r > 0.4 AND r <= 0.5 THEN
            starType := 'WhiteGiant';
        ELSE IF r > 0.5 AND r <= 0.6 THEN
            starType := 'RedGiant';
        ELSE IF r > 0.6 AND r <= 0.7 THEN
            starType := 'CarbonStarC';
        ELSE IF r > 0.7 AND r <= 0.8 THEN
            starType := 'WhiteSupergiant';
        ELSE IF r > 0.8 AND r <= 0.9 THEN
            starType := 'YellowSupergiant';
        ELSE
            starType := 'RedGiant';
        END IF;
        INSERT INTO StarSystems(system_name, coord_x, coord_y, coord_z, star_type)
         VALUES ('SYS' || i || '_' || floor(random()*1000), rndX, rndY, rndZ, starType)
         RETURNING system_id INTO new_sys_id;
        FOR j IN 1..p_planets_per_system LOOP
            INSERT INTO Planets(planet_name, planet_type, planet_size, population, is_populated, system_id)
             VALUES ('Planet_' || i || '_' || j || '_' || floor(random()*1000),
                     'Rocky',
                     5000 + floor(random()*1000),
                     (random()*10000000)::BIGINT,
                     (random() < 0.5),
                     new_sys_id);
        END LOOP;
    END LOOP;
END;
$$;

------------------------------------------------------------------------------
-- Procedure 2: proc_create_system
-- Tworzy nowy system gwiezdny
CREATE OR REPLACE PROCEDURE proc_create_system(p_system_name VARCHAR, p_coord_x NUMERIC, p_coord_y NUMERIC, p_coord_z NUMERIC, p_star_type VARCHAR)
LANGUAGE plpgsql AS $$
BEGIN
    INSERT INTO StarSystems(system_name, coord_x, coord_y, coord_z, star_type)
    VALUES (p_system_name, p_coord_x, p_coord_y, p_coord_z, p_star_type);
END;
$$;

------------------------------------------------------------------------------
-- Procedure 3: proc_create_planet
-- Tworzy nowa planete
CREATE OR REPLACE PROCEDURE proc_create_planet(p_planet_name VARCHAR, p_planet_type VARCHAR, p_planet_size NUMERIC, p_population BIGINT, p_is_populated BOOLEAN, p_system_id INT)
LANGUAGE plpgsql AS $$
BEGIN
    INSERT INTO Planets(planet_name, planet_type, planet_size, population, is_populated, system_id)
    VALUES (p_planet_name, p_planet_type, p_planet_size, p_population, p_is_populated, p_system_id);
END;
$$;

------------------------------------------------------------------------------
-- Procedure 4: proc_create_station
-- Tworzy nowa stacje
CREATE OR REPLACE PROCEDURE proc_create_station(p_station_name VARCHAR, p_station_type VARCHAR, p_system_id INT, p_planet_id INT, p_controlling_faction INT)
LANGUAGE plpgsql AS $$
BEGIN
    INSERT INTO Stations(station_name, station_type, system_id, planet_id, controlling_faction)
    VALUES (p_station_name, p_station_type, p_system_id, p_planet_id, p_controlling_faction);
END;
$$;

------------------------------------------------------------------------------
-- Procedure 5: proc_create_mission
-- Tworzy nowa misje
CREATE OR REPLACE PROCEDURE proc_create_mission(
    p_mission_type VARCHAR,
    p_reward NUMERIC,
    p_assigned_player INT,
    p_target_station_id INT,
    p_required_good_id INT,
    p_required_qty INT
)
LANGUAGE plpgsql AS $$
BEGIN
    INSERT INTO Missions(mission_type, reward, assigned_player, target_station_id, required_good_id, required_qty)
    VALUES (p_mission_type, p_reward, p_assigned_player, p_target_station_id, p_required_good_id, p_required_qty);
END;
$$;

------------------------------------------------------------------------------
-- Procedure 6: proc_finish_mission
-- Konczy misje; jezeli sukces, usuwa ladunek i przyznaje nagrode
CREATE OR REPLACE PROCEDURE proc_finish_mission(p_mission_id INT, p_success BOOLEAN)
LANGUAGE plpgsql AS $$
DECLARE
    m_rec RECORD;
    ship_id_found INT;
BEGIN
    SELECT * INTO m_rec FROM Missions WHERE mission_id = p_mission_id;
    IF m_rec IS NULL THEN
        RAISE EXCEPTION 'Misja % nie istnieje', p_mission_id;
    END IF;
    IF m_rec.status IN ('Failed','Completed') THEN
        RAISE NOTICE 'Misja juz zakonczona';
        RETURN;
    END IF;
    IF p_success = FALSE THEN
        UPDATE Missions SET status = 'Failed' WHERE mission_id = p_mission_id;
        RETURN;
    END IF;
    IF m_rec.mission_type = 'Delivery' THEN
        SELECT ps.ship_id INTO ship_id_found
         FROM PlayerShips ps
         JOIN Ships s ON ps.ship_id = s.ship_id
         WHERE ps.owner_player_id = m_rec.assigned_player
           AND s.current_station = m_rec.target_station_id
         LIMIT 1;
        IF ship_id_found IS NULL THEN
            RAISE EXCEPTION 'Brak statku gracza % na stacji % do dostawy', m_rec.assigned_player, m_rec.target_station_id;
        END IF;
        PERFORM fn_remove_cargo(ship_id_found, m_rec.required_good_id, m_rec.required_qty);
    END IF;
    UPDATE Missions SET status = 'Completed' WHERE mission_id = p_mission_id;
    IF m_rec.assigned_player IS NOT NULL THEN
        UPDATE Players SET credits = credits + m_rec.reward WHERE player_id = m_rec.assigned_player;
    END IF;
END;
$$;

------------------------------------------------------------------------------
-- Procedure 7: proc_pvp_combat
-- Symuluje walke PvP; losowo przenosi kredyty
CREATE OR REPLACE PROCEDURE proc_pvp_combat(p_attacker INT, p_defender INT, p_stake NUMERIC)
LANGUAGE plpgsql AS $$
DECLARE
    rand_val NUMERIC;
BEGIN
    IF p_stake <= 0 THEN
        RAISE EXCEPTION 'Stawka musi byc dodatnia';
    END IF;
    rand_val := random();
    IF rand_val < 0.5 THEN
        PERFORM proc_transfer_credits(p_defender, p_attacker, p_stake);
        RAISE NOTICE 'Atakujacy zwyciezyl!';
    ELSE
        PERFORM proc_transfer_credits(p_attacker, p_defender, p_stake);
        RAISE NOTICE 'Obronca zwyciezyl!';
    END IF;
END;
$$;

------------------------------------------------------------------------------
-- Procedure 8: proc_transfer_credits
-- Przenosi kredyty miedzy graczami
CREATE OR REPLACE PROCEDURE proc_transfer_credits(p_from INT, p_to INT, p_amount NUMERIC)
LANGUAGE plpgsql AS $$
DECLARE
    fromBalance NUMERIC(18,2);
BEGIN
    IF p_amount <= 0 THEN
        RAISE EXCEPTION 'Kwota transferu musi byc wieksza od 0';
    END IF;
    SELECT credits INTO fromBalance FROM Players WHERE player_id = p_from;
    IF fromBalance < p_amount THEN
        RAISE EXCEPTION 'Niewystarczajace kredyty do transferu';
    END IF;
    UPDATE Players SET credits = credits - p_amount WHERE player_id = p_from;
    UPDATE Players SET credits = credits + p_amount WHERE player_id = p_to;
END;
$$;
```

```-- ExampleQueries.sql

------------------------------------------------------------------------------
-- Query 1: Lista aktywnych graczy
SELECT * FROM vw_active_players;

------------------------------------------------------------------------------
-- Query 2: Stacje z frakcja
SELECT * FROM vw_stations_with_faction;

------------------------------------------------------------------------------
-- Query 3: Szczegoly statkow
SELECT * FROM vw_ships_details;

------------------------------------------------------------------------------
-- Query 4: Podsumowanie transakcji
SELECT * FROM vw_deals_summary;

------------------------------------------------------------------------------
-- Query 5: Ostatnie ceny towarow
SELECT * FROM vw_goods_prices;

------------------------------------------------------------------------------
-- Query 6: Oblicz dystans miedzy Sol(1) a AlphaCentauri(2)
SELECT func_get_distance(1,2) AS dist;

------------------------------------------------------------------------------
-- Query 7: Test wyszukiwania trasy (dla statku id=2)
SELECT func_find_path(1, 3, 2) AS route;
```

```
-- CreateDatabase.sql

-- Blok 1: Zabij aktywne polaczenia do bazy spacesimdb
DO $$
BEGIN
    EXECUTE 'SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = ''spacesimdb'' AND pid <> pg_backend_pid();';
END $$;

DROP DATABASE IF EXISTS spacesimdb;
CREATE DATABASE spacesimdb
  WITH ENCODING = 'UTF8'
       TEMPLATE = template0
       LC_COLLATE = 'en_US.UTF-8'
       LC_CTYPE = 'en_US.UTF-8';

-- Aby polaczyc sie z baza, uzyj komendy: \c spacesimdb
```

```import psycopg2
from flask import Flask, request, redirect, url_for

app = Flask(__name__)

# Параметры подключения (убедитесь, что имя базы совпадает, например, "spacesimdb")
DB_PARAMS = {
    "dbname": "spacesimdb",
    "user": "postgres",
    "password": "postgres",  # измените на свой пароль
    "host": "localhost",
    "port": "5432"
}

def get_db_connection():
    return psycopg2.connect(**DB_PARAMS)

def render_page(content):
    return f"""<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>SpaceSim</title>
  <style>
    body {{
      background-color: #121212;
      color: #f0f0f0;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      margin: 0;
      padding: 20px;
    }}
    h1, h2, h3 {{
      color: #ff8800;
      border-bottom: 2px solid #ff8800;
      padding-bottom: 5px;
    }}
    a {{
      color: #ffa500;
      text-decoration: none;
      border-bottom: 1px dashed #ffa500;
    }}
    a:hover {{
      text-decoration: underline;
    }}
    table {{
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 20px;
    }}
    table, th, td {{
      border: 2px solid #ff8800;
    }}
    th, td {{
      padding: 10px;
      text-align: left;
    }}
    input, select, button {{
      padding: 10px;
      margin: 5px 0;
      border: 2px solid #ff8800;
      border-radius: 4px;
      background: #1e1e1e;
      color: #f0f0f0;
    }}
    button {{
      background: #ff8800;
      color: #121212;
      cursor: pointer;
    }}
    button:hover {{
      opacity: 0.9;
    }}
    form {{
      margin-bottom: 20px;
      border: 2px solid #ff8800;
      padding: 15px;
      border-radius: 8px;
    }}
  </style>
</head>
<body>
{content}
</body>
</html>"""

########################################
# ОБЩЕЕ МЕНЮ (админское)
########################################
@app.route("/")
def index():
    content = """
    <h1>SpaceSim</h1>

    <h3>Operations: Create</h3>
    <ul>
      <li><a href='/create_system_form'>Create Star System</a></li>
      <li><a href='/create_planet_form'>Create Planet</a></li>
      <li><a href='/create_station_form'>Create Station</a></li>
      <li><a href='/create_mission_form'>Create Mission</a></li>
      <li><a href='/create_ship_form'>Create Ship (PlayerShip)</a></li>
    </ul>

    <h3>Operations: View</h3>
    <ul>
      <li><a href='/systems'>View Star Systems</a></li>
      <li><a href='/missions'>View Missions</a></li>
      <li><a href='/ships'>View Ships</a></li>
      <li><a href='/npcs'>View NPC Ships</a></li>
      <li><a href='/players'>View Players</a></li>
      <li><a href='/logs'>View Logs</a></li>
    </ul>

    <h3>Other Operations</h3>
    <ul>
      <li><a href='/generate_random_form'>Generate Random Systems/Planets</a></li>
      <li><a href='/test_distance_form'>Calculate Distance between Systems</a></li>
      <li><a href='/find_path_form'>Find Route for Ship</a></li>
      <li><a href='/upgrade_ship_form'>Upgrade Ship</a></li>
      <li><a href='/transfer_credits_form'>Transfer Credits</a></li>
    </ul>

    <hr>
    <h3>Login as Player</h3>
    <form action='/player_menu_redirect' method='GET'>
      PlayerID: <input type='number' name='player_id' value='1' min="0"/>
      <button type='submit'>Go to Player Menu</button>
    </form>
    """
    return render_page(content)

@app.route("/player_menu_redirect")
def player_menu_redirect():
    player_id = request.args.get("player_id", "1")
    return redirect(url_for("player_main_menu", player_id=int(player_id)))

########################################
# Форма создания звёздной системы
########################################
@app.route("/create_system_form")
def create_system_form():
    content = """
    <h2>Create Star System</h2>
    <form method='POST' action='/create_system'>
      System Name: <input type='text' name='system_name' value='SystemName'/><br/>
      Coord X: <input type='number' step='0.1' name='coord_x' value='0'/><br/>
      Coord Y: <input type='number' step='0.1' name='coord_y' value='0'/><br/>
      Coord Z: <input type='number' step='0.1' name='coord_z' value='0'/><br/>
      Star Type: <input type='text' name='star_type' value='BlackHole'/><br/>
      <button type='submit'>Create Star System</button>
    </form>
    <a href='/'>Back</a>
    """
    return render_page(content)

@app.route("/create_system", methods=["POST"])
def create_system():
    system_name = request.form.get("system_name")
    coord_x = float(request.form.get("coord_x"))
    coord_y = float(request.form.get("coord_y"))
    coord_z = float(request.form.get("coord_z"))
    star_type = request.form.get("star_type")
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("""
            INSERT INTO StarSystems(system_name, coord_x, coord_y, coord_z, star_type)
            VALUES (%s, %s, %s, %s, %s) RETURNING system_id
        """, (system_name, coord_x, coord_y, coord_z, star_type))
        system_id = cur.fetchone()[0]
        conn.commit()
        result = f"Star system '{system_name}' created with ID {system_id}!"
    except Exception as e:
        conn.rollback()
        result = f"Error creating system: {e}"
    finally:
        cur.close()
        conn.close()
    return render_page(f"<p>{result}</p><a href='/systems'>View Star Systems</a>")

########################################
# Форма создания планеты
########################################
@app.route("/create_planet_form")
def create_planet_form():
    content = """
    <h2>Create Planet</h2>
    <form method='POST' action='/create_planet'>
      Planet Name: <input type='text' name='planet_name' value='Venus'/><br/>
      Planet Type: <input type='text' name='planet_type' value='Rocky'/><br/>
      Planet Size: <input type='number' step='0.1' name='planet_size' value='1'/><br/>
      Population: <input type='number' name='population' value='1000000'/><br/>
      Populated? <select name='is_populated'>
          <option value='true'>Yes</option>
          <option value='false'>No</option>
      </select><br/>
      Star System ID: <input type='number' name='system_id' value='1'/><br/>
      <button type='submit'>Create Planet</button>
    </form>
    <a href='/'>Back</a>
    """
    return render_page(content)

@app.route("/create_planet", methods=["POST"])
def create_planet():
    planet_name = request.form.get("planet_name")
    planet_type = request.form.get("planet_type")
    planet_size = float(request.form.get("planet_size"))
    population = int(request.form.get("population"))
    is_populated = request.form.get("is_populated").lower() == "true"
    system_id = int(request.form.get("system_id"))
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("""
            INSERT INTO Planets(planet_name, planet_type, planet_size, population, is_populated, system_id)
            VALUES (%s, %s, %s, %s, %s, %s) RETURNING planet_id
        """, (planet_name, planet_type, planet_size, population, is_populated, system_id))
        planet_id = cur.fetchone()[0]
        conn.commit()
        result = f"Planet '{planet_name}' created with ID {planet_id}!"
    except Exception as e:
        conn.rollback()
        result = f"Error creating planet: {e}"
    finally:
        cur.close()
        conn.close()
    return render_page(f"<p>{result}</p><a href='/system/{system_id}'>Back to System Details</a>")

########################################
# Форма создания станции
########################################
@app.route("/create_station_form")
def create_station_form():
    content = """
    <h2>Create Station</h2>
    <form method='POST' action='/create_station'>
      Station Name: <input type='text' name='station_name' value='Orbital One'/><br/>
      Station Type: <input type='text' name='station_type' value='Trading'/><br/>
      Star System ID: <input type='number' name='system_id' value='1'/><br/>
      Planet ID (optional): <input type='text' name='planet_id'/><br/>
      Controlling Faction ID (optional): <input type='text' name='faction_id'/><br/>
      <button type='submit'>Create Station</button>
    </form>
    <a href='/'>Back</a>
    """
    return render_page(content)

@app.route("/create_station", methods=["POST"])
def create_station():
    station_name = request.form.get("station_name")
    station_type = request.form.get("station_type")
    system_id = int(request.form.get("system_id"))
    planet_id = request.form.get("planet_id")
    planet_id = int(planet_id) if planet_id and planet_id.strip() != "" else None
    faction_id = request.form.get("faction_id")
    faction_id = int(faction_id) if faction_id and faction_id.strip() != "" else None
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("""
            INSERT INTO Stations(station_name, station_type, system_id, planet_id, controlling_faction)
            VALUES (%s, %s, %s, %s, %s) RETURNING station_id
        """, (station_name, station_type, system_id, planet_id, faction_id))
        station_id = cur.fetchone()[0]
        conn.commit()
        result = f"Station '{station_name}' created with ID {station_id}!"
    except Exception as e:
        conn.rollback()
        result = f"Error creating station: {e}"
    finally:
        cur.close()
        conn.close()
    return render_page(f"<p>{result}</p><a href='/systems'>Back to Systems</a>")

########################################
# Форма создания миссии
########################################
@app.route("/create_mission_form")
def create_mission_form():
    content = """
    <h2>Create Mission</h2>
    <form method='POST' action='/create_mission'>
      Mission Type: <input type='text' name='mission_type' value='Delivery'/><br/>
      Reward: <input type='number' step='0.01' name='reward' value='500'/><br/>
      Target Station ID: <input type='number' name='target_station_id' value='1'/><br/>
      Required Good ID: <input type='number' name='required_good_id' value='1'/><br/>
      Required Quantity: <input type='number' name='required_qty' value='10'/><br/>
      Assigned Player ID (optional): <input type='text' name='assigned_player'/><br/>
      <button type='submit'>Create Mission</button>
    </form>
    <a href='/'>Back</a>
    """
    return render_page(content)

@app.route("/create_mission", methods=["POST"])
def create_mission():
    mission_type = request.form.get("mission_type")
    reward = float(request.form.get("reward"))
    target_station_id = int(request.form.get("target_station_id"))
    required_good_id = int(request.form.get("required_good_id"))
    required_qty = int(request.form.get("required_qty"))
    assigned_player = request.form.get("assigned_player")
    assigned_player = int(assigned_player) if assigned_player and assigned_player.strip() != "" else None
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("""
            INSERT INTO Missions(mission_type, reward, target_station_id, required_good_id, required_qty, assigned_player, status)
            VALUES (%s, %s, %s, %s, %s, %s, 'Open') RETURNING mission_id
        """, (mission_type, reward, target_station_id, required_good_id, required_qty, assigned_player))
        mission_id = cur.fetchone()[0]
        conn.commit()
        result = f"Mission '{mission_type}' created with ID {mission_id}!"
    except Exception as e:
        conn.rollback()
        result = f"Error creating mission: {e}"
    finally:
        cur.close()
        conn.close()
    return render_page(f"<p>{result}</p><a href='/missions'>View Missions</a>")

########################################
# Просмотр звёздных систем
########################################
@app.route("/systems")
def systems():
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("SELECT system_id, system_name, coord_x, coord_y, coord_z, star_type FROM StarSystems ORDER BY system_id")
        systems_list = cur.fetchall()
        html = "<h2>Star Systems</h2>"
        if systems_list:
            html += "<table><tr><th>ID</th><th>Name</th><th>X</th><th>Y</th><th>Z</th><th>Star Type</th></tr>"
            for sys in systems_list:
                html += f"<tr><td>{sys[0]}</td><td><a href='/system/{sys[0]}'>{sys[1]}</a></td><td>{sys[2]}</td><td>{sys[3]}</td><td>{sys[4]}</td><td>{sys[5]}</td></tr>"
            html += "</table>"
        else:
            html += "<p>No star systems found.</p>"
    except Exception as e:
        html = f"<p>Error fetching systems: {e}</p>"
    finally:
        cur.close()
        conn.close()
    html += "<a href='/'>Back</a>"
    return render_page(html)

########################################
# Детали звёздной системы (планеты, станции)
########################################
@app.route("/system/<int:system_id>")
def system_details(system_id):
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("SELECT system_id, system_name, coord_x, coord_y, coord_z, star_type FROM StarSystems WHERE system_id = %s", (system_id,))
        system_row = cur.fetchone()
        if not system_row:
            return render_page(f"<p>System with ID {system_id} not found.</p><a href='/systems'>Back</a>")
        html = f"<h2>System: {system_row[1]} (ID={system_row[0]})</h2>"
        html += f"<p>Coordinates: ({system_row[2]}, {system_row[3]}, {system_row[4]})<br/>Star Type: {system_row[5]}</p>"
        cur.execute("SELECT planet_id, planet_name, planet_type, planet_size, population, is_populated FROM Planets WHERE system_id = %s ORDER BY planet_id", (system_id,))
        planets = cur.fetchall()
        html += "<h3>Planets in the System</h3>"
        if planets:
            html += "<table><tr><th>ID</th><th>Name</th><th>Type</th><th>Size</th><th>Population</th><th>Populated?</th></tr>"
            for p in planets:
                html += f"<tr><td>{p[0]}</td><td>{p[1]}</td><td>{p[2]}</td><td>{p[3]}</td><td>{p[4]}</td><td>{'Yes' if p[5] else 'No'}</td></tr>"
            html += "</table>"
        else:
            html += "<p>No planets in this system.</p>"
        cur.execute("""SELECT s.station_id, s.station_name, s.station_type, s.planet_id, f.faction_name
                       FROM Stations s
                       LEFT JOIN Factions f ON s.controlling_faction = f.faction_id
                       WHERE s.system_id = %s
                       ORDER BY s.station_id""", (system_id,))
        stations = cur.fetchall()
        html += "<h3>Stations in the System</h3>"
        if stations:
            html += "<table><tr><th>ID</th><th>Name</th><th>Type</th><th>Planet</th><th>Faction</th></tr>"
            for s in stations:
                html += f"<tr><td>{s[0]}</td><td>{s[1]}</td><td>{s[2]}</td><td>{s[3] or '---'}</td><td>{s[4] or '---'}</td></tr>"
            html += "</table>"
        else:
            html += "<p>No stations in this system.</p>"
    except Exception as e:
        html = f"<p>Error fetching system details: {e}</p>"
    finally:
        cur.close()
        conn.close()
    html += "<a href='/systems'>Back to Systems</a>"
    return render_page(html)

########################################
# Просмотр миссий
########################################
@app.route("/missions")
def missions():
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("""
            SELECT mission_id, mission_type, reward, target_station_id, required_good_id, required_qty, assigned_player, status
            FROM Missions
            ORDER BY mission_id
        """)
        mission_rows = cur.fetchall()
        html = "<h2>Missions</h2>"
        if mission_rows:
            html += "<table><tr><th>ID</th><th>Type</th><th>Reward</th><th>Target Station</th><th>Good</th><th>Qty</th><th>Assigned Player</th><th>Status</th></tr>"
            for m in mission_rows:
                html += f"<tr><td>{m[0]}</td><td>{m[1]}</td><td>{m[2]}</td><td>{m[3] or '---'}</td><td>{m[4] or '---'}</td><td>{m[5]}</td><td>{m[6] or '---'}</td><td>{m[7]}</td></tr>"
            html += "</table>"
        else:
            html += "<p>No missions found.</p>"
    except Exception as e:
        html = f"<p>Error fetching missions: {e}</p>"
    finally:
        cur.close()
        conn.close()
    html += "<a href='/'>Back</a>"
    return render_page(html)

########################################
# Тест расчёта расстояния между системами
########################################
@app.route("/test_distance_form")
def test_distance_form():
    content = """
    <h2>Calculate Distance between Systems</h2>
    <form method='GET' action='/test_distance'>
      System A ID: <input type='number' name='systemA' value='1' min="0"/><br/>
      System B ID: <input type='number' name='systemB' value='2' min="0"/><br/>
      <button type='submit'>Calculate Distance</button>
    </form>
    <a href='/'>Back</a>
    """
    return render_page(content)

@app.route("/test_distance")
def test_distance():
    systemA = int(request.args.get("systemA", 1))
    systemB = int(request.args.get("systemB", 2))
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("SELECT public.func_get_distance(%s, %s)", (systemA, systemB))
        distance = cur.fetchone()[0]
        result = f"Distance between systems {systemA} and {systemB} = {distance}"
    except Exception as e:
        result = f"Error: {e}"
    finally:
        cur.close()
        conn.close()
    return render_page(f"<p>{result}</p><a href='/test_distance_form'>Back</a>")

########################################
# Тест поиска маршрута для корабля
########################################
@app.route("/find_path_form")
def find_path_form():
    content = """
    <h2>Find Route for Ship</h2>
    <form method='GET' action='/find_path'>
      System A ID (start): <input type='number' name='systemA' value='1' min="0"/><br/>
      System B ID (destination): <input type='number' name='systemB' value='3' min="0"/><br/>
      Ship ID: <input type='number' name='ship_id' value='1' min="0"/><br/>
      <button type='submit'>Find Route</button>
    </form>
    <a href='/'>Back</a>
    """
    return render_page(content)

@app.route("/find_path")
def find_path():
    systemA = int(request.args.get("systemA", 1))
    systemB = int(request.args.get("systemB", 3))
    ship_id = int(request.args.get("ship_id", 1))
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("SELECT public.func_find_path(%s, %s, %s)", (systemA, systemB, ship_id))
        route = cur.fetchone()[0]
        result = f"Route for ship {ship_id}: {route}"
    except Exception as e:
        result = f"Error: {e}"
    finally:
        cur.close()
        conn.close()
    return render_page(f"<p>{result}</p><a href='/find_path_form'>Back</a>")

########################################
# Форма апгрейда корабля
########################################
@app.route("/upgrade_ship_form")
def upgrade_ship_form():
    content = """
    <h2>Upgrade Ship</h2>
    <form method='POST' action='/upgrade_ship'>
      Ship ID: <input type='number' name='ship_id' value='1' min="0"/><br/>
      Module Name: <input type='text' name='module_name' value='Shield'/><br/>
      <button type='submit'>Upgrade</button>
    </form>
    <a href='/'>Back</a>
    """
    return render_page(content)

@app.route("/upgrade_ship", methods=["POST"])
def upgrade_ship():
    ship_id = int(request.form.get("ship_id"))
    module_name = request.form.get("module_name")
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("SELECT public.func_upgrade_ship(%s, %s)", (ship_id, module_name))
        result = cur.fetchone()[0]
        conn.commit()
    except Exception as e:
        conn.rollback()
        result = f"Error upgrading ship: {e}"
    finally:
        cur.close()
        conn.close()
    return render_page(f"<p>{result}</p><a href='/'>Back</a>")

########################################
# Форма генерации случайных систем и планет
########################################
@app.route("/generate_random_form")
def generate_random_form():
    content = """
    <h2>Generate Random Star Systems and Planets</h2>
    <form method='POST' action='/generate_random'>
      Number of systems: <input type='number' name='system_count' value='5' min="1"/><br/>
      Planets per system: <input type='number' name='planets_per_system' value='3' min="0"/><br/>
      <button type='submit'>Generate</button>
    </form>
    <a href='/'>Back</a>
    """
    return render_page(content)

@app.route("/generate_random", methods=["POST"])
def generate_random():
    system_count = int(request.form.get("system_count"))
    planets_per_system = int(request.form.get("planets_per_system"))
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("CALL proc_generate_random_systems_and_planets(%s, %s)", (system_count, planets_per_system))
        conn.commit()
        result = f"Generated {system_count} systems with {planets_per_system} planets each."
    except Exception as e:
        conn.rollback()
        result = f"Error: {e}"
    finally:
        cur.close()
        conn.close()
    return render_page(f"<p>{result}</p><a href='/'>Back</a>")

########################################
# Операции для игрока: меню, профиль, сделки, перемещение корабля и т.д.
########################################
@app.route("/player/<int:player_id>/menu")
def player_main_menu(player_id):
    content = f"""
    <h2>Player Menu {player_id}</h2>
    <ul>
      <li><a href='/player/{player_id}/profile'>Profile (Ships, Credits)</a></li>
      <li><a href='/player/{player_id}/buy_good_form'>Buy Goods</a></li>
      <li><a href='/player/{player_id}/sell_good_form'>Sell Goods</a></li>
      <li><a href='/player/{player_id}/cargo'>View Cargo</a></li>
      <li><a href='/player/{player_id}/move_ship_form'>Move Ship</a></li>
      <li><a href='/player/{player_id}/missions'>My Missions</a></li>
      <li><a href='/player/{player_id}/finish_mission_form'>Finish Mission</a></li>
      <li><a href='/player/{player_id}/calc_profit_form'>Calculate Profit</a></li>
    </ul>
    <a href='/'>Back to Main Menu</a>
    """
    return render_page(content)

@app.route("/player/<int:player_id>/profile")
def player_profile(player_id):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT player_name, credits FROM Players WHERE player_id = %s", (player_id,))
    player_info = cur.fetchone()
    if not player_info:
        cur.close()
        conn.close()
        return render_page(f"<p>Player {player_id} not found!</p><a href='/'>Back</a>")
    player_name, credits = player_info
    cur.execute("""
        SELECT ship_id, model_name, max_speed, cargo_capacity, jump_range, current_system, current_station
        FROM ONLY PlayerShips
        WHERE owner_player_id = %s
        ORDER BY ship_id
    """, (player_id,))
    ships = cur.fetchall()
    cur.close()
    conn.close()
    html = f"<h2>Profile: {player_name} (ID={player_id})</h2>"
    html += f"<p>Credits: {credits}</p>"
    html += "<h3>My Ships:</h3>"
    if ships:
        html += "<table><tr><th>ID</th><th>Model</th><th>Speed</th><th>CargoCap</th><th>JumpRange</th><th>System</th><th>Station</th></tr>"
        for s in ships:
            html += f"<tr><td>{s[0]}</td><td>{s[1]}</td><td>{s[2]}</td><td>{s[3]}</td><td>{s[4]}</td><td>{s[5] or '---'}</td><td>{s[6] or '---'}</td></tr>"
        html += "</table>"
    else:
        html += "<p>No ships.</p>"
    html += f"<p><a href='/player/{player_id}/menu'>Back</a></p>"
    return render_page(html)

@app.route("/player/<int:player_id>/buy_good_form")
def player_buy_good_form(player_id):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT ship_id, model_name FROM ONLY PlayerShips WHERE owner_player_id = %s", (player_id,))
    ships = cur.fetchall()
    cur.close()
    conn.close()
    if not ships:
        return render_page(f"<p>No ships for player {player_id}!</p><a href='/player/{player_id}/menu'>Back</a>")
    options = "".join([f"<option value='{s[0]}'>{s[0]} - {s[1]}</option>" for s in ships])
    content = f"""
    <h2>Buy Goods (Player {player_id})</h2>
    <form method='POST' action='/player/{player_id}/deal_buy'>
      Ship: <select name='ship_id'>{options}</select><br/><br/>
      Station (ID): <input type='number' name='station_id' value='1' min="0"/><br/>
      Good (ID): <input type='number' name='good_id' value='1' min="0"/><br/>
      Quantity: <input type='number' name='quantity' value='5' min="0"/><br/>
      Price per unit: <input type='number' step='0.01' name='price_per_unit' value='10' min="0"/><br/>
      <button type='submit'>Buy</button>
    </form>
    <a href='/player/{player_id}/menu'>Back</a>
    """
    return render_page(content)

@app.route("/player/<int:player_id>/deal_buy", methods=["POST"])
def player_deal_buy(player_id):
    ship_id = int(request.form.get("ship_id"))
    station_id = int(request.form.get("station_id"))
    good_id = int(request.form.get("good_id"))
    quantity = int(request.form.get("quantity"))
    ppu = float(request.form.get("price_per_unit"))
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("SELECT owner_player_id FROM ONLY PlayerShips WHERE ship_id = %s", (ship_id,))
        row = cur.fetchone()
        if not row or row[0] != player_id:
            return render_page(f"<p>Ship {ship_id} does not belong to player {player_id}!</p><a href='/player/{player_id}/menu'>Back</a>")
        cur.execute("""
            INSERT INTO Deals(player_id, station_id, good_id, quantity, price_per_unit, deal_type, ship_id)
            VALUES (%s, %s, %s, %s, %s, 'BUY', %s)
        """, (player_id, station_id, good_id, quantity, ppu, ship_id))
        conn.commit()
    except Exception as e:
        conn.rollback()
        cur.close()
        conn.close()
        return render_page(f"<p>Error buying goods: {e}</p><a href='/player/{player_id}/menu'>Back</a>")
    cur.close()
    conn.close()
    return render_page(f"<p>Player {player_id} bought {quantity} units of good {good_id} for ship {ship_id} at {ppu} each.</p><a href='/player/{player_id}/menu'>Back</a>")

@app.route("/player/<int:player_id>/sell_good_form")
def player_sell_good_form(player_id):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT ship_id, model_name FROM ONLY PlayerShips WHERE owner_player_id = %s", (player_id,))
    ships = cur.fetchall()
    cur.close()
    conn.close()
    if not ships:
        return render_page(f"<p>No ships for player {player_id}!</p><a href='/player/{player_id}/menu'>Back</a>")
    options = "".join([f"<option value='{s[0]}'>{s[0]} - {s[1]}</option>" for s in ships])
    content = f"""
    <h2>Sell Goods (Player {player_id})</h2>
    <form method='POST' action='/player/{player_id}/deal_sell'>
      Ship: <select name='ship_id'>{options}</select><br/><br/>
      Station (ID): <input type='number' name='station_id' value='1' min="0"/><br/>
      Good (ID): <input type='number' name='good_id' value='1' min="0"/><br/>
      Quantity: <input type='number' name='quantity' value='2' min="0"/><br/>
      Price per unit: <input type='number' step='0.01' name='price_per_unit' value='15' min="0"/><br/>
      <button type='submit'>Sell</button>
    </form>
    <a href='/player/{player_id}/menu'>Back</a>
    """
    return render_page(content)

@app.route("/player/<int:player_id>/deal_sell", methods=["POST"])
def player_deal_sell(player_id):
    ship_id = int(request.form.get("ship_id"))
    station_id = int(request.form.get("station_id"))
    good_id = int(request.form.get("good_id"))
    quantity = int(request.form.get("quantity"))
    ppu = float(request.form.get("price_per_unit"))
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("SELECT owner_player_id FROM ONLY PlayerShips WHERE ship_id = %s", (ship_id,))
        row = cur.fetchone()
        if not row or row[0] != player_id:
            return render_page(f"<p>Ship {ship_id} does not belong to player {player_id}!</p><a href='/player/{player_id}/menu'>Back</a>")
        cur.execute("""
            INSERT INTO Deals(player_id, station_id, good_id, quantity, price_per_unit, deal_type, ship_id)
            VALUES (%s, %s, %s, %s, %s, 'SELL', %s)
        """, (player_id, station_id, good_id, quantity, ppu, ship_id))
        conn.commit()
    except Exception as e:
        conn.rollback()
        cur.close()
        conn.close()
        return render_page(f"<p>Error selling goods: {e}</p><a href='/player/{player_id}/menu'>Back</a>")
    cur.close()
    conn.close()
    return render_page(f"<p>Player {player_id} sold {quantity} units of good {good_id} from ship {ship_id} at {ppu} each.</p><a href='/player/{player_id}/menu'>Back</a>")

@app.route("/player/<int:player_id>/cargo")
def player_cargo(player_id):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
      SELECT sc.ship_id, s.model_name, sc.good_id, g.good_name, sc.quantity
      FROM ShipCargo sc
      JOIN Ships s ON sc.ship_id = s.ship_id
      JOIN Goods g ON sc.good_id = g.good_id
      JOIN ONLY PlayerShips ps ON ps.ship_id = sc.ship_id
      WHERE ps.owner_player_id = %s
      ORDER BY sc.ship_id, sc.good_id
    """, (player_id,))
    rows = cur.fetchall()
    cur.close()
    conn.close()
    if not rows:
        return render_page(f"<p>No cargo found for player {player_id}.</p><a href='/player/{player_id}/menu'>Back</a>")
    html = f"<h2>Player {player_id} Cargo</h2>"
    html += "<table><tr><th>ShipID</th><th>Model</th><th>GoodID</th><th>GoodName</th><th>Quantity</th></tr>"
    for (ship_id, model_name, good_id, good_name, qty) in rows:
        html += f"<tr><td>{ship_id}</td><td>{model_name}</td><td>{good_id}</td><td>{good_name}</td><td>{qty}</td></tr>"
    html += f"</table><a href='/player/{player_id}/menu'>Back</a>"
    return render_page(html)

@app.route("/player/<int:player_id>/move_ship_form")
def player_move_ship_form(player_id):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT ship_id, model_name FROM ONLY PlayerShips WHERE owner_player_id = %s", (player_id,))
    ships = cur.fetchall()
    cur.close()
    conn.close()
    if not ships:
        return render_page(f"<p>No ships for player {player_id}!</p><a href='/player/{player_id}/menu'>Back</a>")
    options = "".join([f"<option value='{s[0]}'>{s[0]} - {s[1]}</option>" for s in ships])
    content = f"""
    <h2>Move Ship (Player {player_id})</h2>
    <form method='POST' action='/player/{player_id}/move_ship'>
      Ship: <select name='ship_id'>{options}</select><br/><br/>
      New System ID: <input type='number' name='system_id' value='1' min="0"/><br/>
      New Station ID (0 for none): <input type='number' name='station_id' value='1' min="0"/><br/>
      <button type='submit'>Move</button>
    </form>
    <a href='/player/{player_id}/menu'>Back</a>
    """
    return render_page(content)

@app.route("/player/<int:player_id>/move_ship", methods=["POST"])
def player_move_ship(player_id):
    ship_id = int(request.form.get("ship_id"))
    new_system_id = int(request.form.get("system_id"))
    new_station_id = int(request.form.get("station_id"))
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("SELECT owner_player_id FROM ONLY PlayerShips WHERE ship_id = %s", (ship_id,))
        row = cur.fetchone()
        if not row or row[0] != player_id:
            return render_page(f"<p>Ship {ship_id} does not belong to player {player_id}!</p><a href='/player/{player_id}/menu'>Back</a>")
        cur.execute("UPDATE Ships SET current_system = %s, current_station = %s WHERE ship_id = %s",
                    (new_system_id, new_station_id, ship_id))
        conn.commit()
    except Exception as e:
        conn.rollback()
        cur.close()
        conn.close()
        return render_page(f"<p>Error moving ship: {e}</p><a href='/player/{player_id}/menu'>Back</a>")
    cur.close()
    conn.close()
    return render_page(f"<p>Ship {ship_id} moved to system {new_system_id} and station {new_station_id}.</p><a href='/player/{player_id}/menu'>Back</a>")

@app.route("/player/<int:player_id>/missions")
def player_missions(player_id):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT mission_id, mission_type, reward, target_station_id, required_good_id, required_qty, status
        FROM Missions
        WHERE assigned_player = %s
        ORDER BY mission_id
    """, (player_id,))
    missions_list = cur.fetchall()
    cur.close()
    conn.close()
    html = f"<h2>Player {player_id} Missions</h2>"
    if not missions_list:
        html += "<p>No missions.</p>"
    else:
        html += "<table><tr><th>ID</th><th>Type</th><th>Reward</th><th>Target Station</th><th>Good</th><th>Quantity</th><th>Status</th></tr>"
        for m in missions_list:
            html += f"<tr><td>{m[0]}</td><td>{m[1]}</td><td>{m[2]}</td><td>{m[3] or '---'}</td><td>{m[4] or '---'}</td><td>{m[5]}</td><td>{m[6]}</td></tr>"
        html += "</table>"
    html += f"<p><a href='/player/{player_id}/menu'>Back</a></p>"
    return render_page(html)

@app.route("/player/<int:player_id>/finish_mission_form")
def finish_mission_form(player_id):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT mission_id, mission_type, status
        FROM Missions
        WHERE assigned_player = %s AND status IN ('Open','InProgress')
        ORDER BY mission_id
    """, (player_id,))
    missions = cur.fetchall()
    cur.close()
    conn.close()
    if not missions:
        return render_page(f"<p>No active missions for player {player_id}!</p><a href='/player/{player_id}/menu'>Back</a>")
    options = "".join([f"<option value='{m[0]}'>{m[0]} - {m[1]} ({m[2]})</option>" for m in missions])
    content = f"""
    <h2>Finish Mission (Player {player_id})</h2>
    <form method='POST' action='/player/{player_id}/finish_mission'>
      Select Mission:
      <select name='mission_id'>{options}</select><br/><br/>
      Success? <select name='success'>
        <option value='true'>Yes</option>
        <option value='false'>No</option>
      </select><br/><br/>
      <button type='submit'>Finish Mission</button>
    </form>
    <a href='/player/{player_id}/menu'>Back</a>
    """
    return render_page(content)

@app.route("/player/<int:player_id>/finish_mission", methods=["POST"])
def finish_mission(player_id):
    mission_id = int(request.form.get("mission_id"))
    success_str = request.form.get("success", "true").lower()
    success_bool = (success_str == "true")
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("CALL proc_finish_mission(%s, %s)", (mission_id, success_bool))
        conn.commit()
    except Exception as e:
        conn.rollback()
        cur.close()
        conn.close()
        return render_page(f"<p>Error finishing mission {mission_id}: {e}</p><a href='/player/{player_id}/menu'>Back</a>")
    cur.close()
    conn.close()
    return render_page(f"<p>Mission {mission_id} finished. Success = {success_bool}.</p><a href='/player/{player_id}/menu'>Back</a>")

@app.route("/player/<int:player_id>/calc_profit_form")
def player_calc_profit_form(player_id):
    content = f"""
    <h2>Calculate Profit (Player {player_id})</h2>
    <form action='/player/{player_id}/calc_profit' method='GET'>
      <button type='submit'>Calculate</button>
    </form>
    <a href='/player/{player_id}/menu'>Back</a>
    """
    return render_page(content)

@app.route("/player/<int:player_id>/calc_profit")
def player_calc_profit(player_id):
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("SELECT func_calc_player_profit(%s)", (player_id,))
        profit = cur.fetchone()[0]
    except Exception as e:
        profit = f"Error: {e}"
    finally:
        cur.close()
        conn.close()
    return render_page(f"<p>Player {player_id} net profit = {profit}</p><a href='/player/{player_id}/menu'>Back</a>")

########################################
# Дополнительные маршруты: просмотр всех кораблей, NPC, станций, игроков, логов, создание игрока, перевод кредитов
########################################
@app.route("/create_ship_form")
def create_ship_form():
    content = """
    <h2>Create Ship (PlayerShip)</h2>
    <form method='POST' action='/create_ship'>
      Model: <input type='text' name='model_name' value='Eagle'/><br/>
      Speed: <input type='number' name='max_speed' value='250' min="0"/><br/>
      Cargo Capacity: <input type='number' name='cargo_capacity' value='16' min="0"/><br/>
      Jump Range: <input type='number' step='0.1' name='jump_range' value='10' min="0"/><br/>
      Player ID: <input type='number' name='player_id' value='1' min="0"/><br/>
      Current System (ID): <input type='number' name='system_id' value='1' min="0"/><br/>
      Current Station (ID, optional): <input type='text' name='station_id'/><br/>
      <button type='submit'>Create Ship</button>
    </form>
    <a href='/'>Back</a>
    """
    return render_page(content)

@app.route("/create_ship", methods=["POST"])
def create_ship():
    model_name = request.form.get("model_name")
    max_speed = int(request.form.get("max_speed"))
    cargo_capacity = int(request.form.get("cargo_capacity"))
    jump_range = float(request.form.get("jump_range"))
    player_id = int(request.form.get("player_id"))
    system_id = int(request.form.get("system_id"))
    station_id = request.form.get("station_id")
    station_id = int(station_id) if station_id and station_id.strip() != "" else None
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("""
            INSERT INTO PlayerShips(owner_player_id, model_name, max_speed, cargo_capacity, jump_range, current_system, current_station, is_destroyed)
            VALUES (%s, %s, %s, %s, %s, %s, %s, FALSE) RETURNING ship_id
        """, (player_id, model_name, max_speed, cargo_capacity, jump_range, system_id, station_id))
        ship_id = cur.fetchone()[0]
        conn.commit()
    except Exception as e:
        conn.rollback()
        cur.close()
        conn.close()
        return render_page(f"<p>Error creating ship: {e}</p><a href='/'>Back</a>")
    cur.close()
    conn.close()
    return render_page(f"<p>Ship '{model_name}' created with ID {ship_id}!</p><a href='/ships'>View Ships</a>")

@app.route("/ships")
def ships():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT ship_id, model_name, max_speed, cargo_capacity, jump_range, current_system, current_station, is_destroyed
        FROM Ships
        ORDER BY ship_id
    """)
    rows = cur.fetchall()
    cur.close()
    conn.close()
    html = "<h2>All Ships</h2><table><tr><th>ID</th><th>Model</th><th>Speed</th><th>CargoCap</th><th>JumpRange</th><th>System</th><th>Station</th><th>Destroyed?</th></tr>"
    for r in rows:
        html += f"<tr><td>{r[0]}</td><td>{r[1]}</td><td>{r[2]}</td><td>{r[3]}</td><td>{r[4]}</td><td>{r[5] or '---'}</td><td>{r[6] or '---'}</td><td>{'YES' if r[7] else 'NO'}</td></tr>"
    html += "</table><a href='/'>Back</a>"
    return render_page(html)

@app.route("/npcs")
def npcs():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT ns.ship_id, ns.model_name, ns.max_speed, ns.cargo_capacity, ns.jump_range,
               ns.current_system, ns.current_station, ns.is_destroyed, ns.npc_name, f.faction_name
        FROM ONLY NPCShips ns
        LEFT JOIN Factions f ON ns.faction_id = f.faction_id
        ORDER BY ns.ship_id
    """)
    rows = cur.fetchall()
    cur.close()
    conn.close()
    html = "<h2>NPC Ships</h2>"
    if rows:
        html += ("<table><tr><th>ID</th><th>Model</th><th>Speed</th><th>CargoCap</th><th>JumpRange</th>"
                 "<th>System</th><th>Station</th><th>Destroyed?</th><th>NPC Name</th><th>Faction</th></tr>")
        for r in rows:
            (ship_id, model_name, speed, cargo_cap, jump_range,
             system_id, station_id, is_destroyed, npc_name, faction_name) = r
            html += (f"<tr><td>{ship_id}</td><td>{model_name}</td><td>{speed}</td>"
                     f"<td>{cargo_cap}</td><td>{jump_range}</td><td>{system_id or '---'}</td>"
                     f"<td>{station_id or '---'}</td><td>{'YES' if is_destroyed else 'NO'}</td>"
                     f"<td>{npc_name or '---'}</td><td>{faction_name or '---'}</td></tr>")
        html += "</table>"
    else:
        html += "<p>No NPC ships.</p>"
    html += "<p><a href='/'>Back</a></p>"
    return render_page(html)

@app.route("/stations")
def stations():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT s.station_id, s.station_name, f.faction_name AS controlling_faction
        FROM Stations s
        LEFT JOIN Factions f ON s.controlling_faction = f.faction_id
        ORDER BY s.station_id
    """)
    rows = cur.fetchall()
    cur.close()
    conn.close()
    html = "<h2>Stations</h2><table><tr><th>ID</th><th>Name</th><th>Controlling Faction</th></tr>"
    for r in rows:
        html += f"<tr><td>{r[0]}</td><td>{r[1]}</td><td>{r[2] or '---'}</td></tr>"
    html += "</table><a href='/'>Back</a>"
    return render_page(html)

@app.route("/logs")
def logs():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT log_id, event_type, description, created_at FROM Logs ORDER BY log_id DESC")
    rows = cur.fetchall()
    cur.close()
    conn.close()
    html = "<h2>Logs</h2><table><tr><th>ID</th><th>Event</th><th>Description</th><th>Created At</th></tr>"
    for r in rows:
        html += f"<tr><td>{r[0]}</td><td>{r[1]}</td><td>{r[2]}</td><td>{r[3]}</td></tr>"
    html += "</table><a href='/'>Back</a>"
    return render_page(html)

@app.route("/create_player_form")
def create_player_form():
    content = """
    <h2>Create Player</h2>
    <form method='POST' action='/create_player'>
      Player Name: <input type='text' name='player_name' value='NewPlayer'/><br/>
      Initial Credits: <input type='number' step='0.01' name='credits' value='1000' min="0"/><br/>
      <button type='submit'>Create</button>
    </form>
    <a href='/'>Back</a>
    """
    return render_page(content)

@app.route("/create_player", methods=["POST"])
def create_player():
    player_name = request.form.get("player_name")
    credits = float(request.form.get("credits"))
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("INSERT INTO Players(player_name, credits) VALUES (%s, %s)", (player_name, credits))
        conn.commit()
    except Exception as e:
        conn.rollback()
        cur.close()
        conn.close()
        return render_page(f"<p>Error creating player: {e}</p><a href='/'>Back</a>")
    cur.close()
    conn.close()
    return render_page(f"<p>Player {player_name} created!</p><a href='/players'>View Players</a>")

@app.route("/players")
def players():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT player_id, player_name, credits FROM Players ORDER BY player_id")
    rows = cur.fetchall()
    cur.close()
    conn.close()
    html = "<h2>Players</h2><table><tr><th>ID</th><th>Name</th><th>Credits</th></tr>"
    for r in rows:
        html += f"<tr><td>{r[0]}</td><td>{r[1]}</td><td>{r[2]}</td></tr>"
    html += "</table><a href='/'>Back</a>"
    return render_page(html)

@app.route("/transfer_credits_form")
def transfer_credits_form():
    content = """
    <h2>Transfer Credits</h2>
    <form method='POST' action='/transfer_credits'>
      From (player_id): <input type='number' name='from_id' value='1' min="0"/><br/>
      To (player_id): <input type='number' name='to_id' value='2' min="0"/><br/>
      Amount: <input type='number' step='0.01' name='amount' value='100' min="0"/><br/>
      <button type='submit'>Transfer</button>
    </form>
    <a href='/'>Back</a>
    """
    return render_page(content)

@app.route("/transfer_credits", methods=["POST"])
def transfer_credits():
    from_id = int(request.form.get("from_id"))
    to_id = int(request.form.get("to_id"))
    amount = float(request.form.get("amount"))
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("CALL proc_transfer_credits(%s, %s, %s)", (from_id, to_id, amount))
        conn.commit()
    except Exception as e:
        conn.rollback()
        cur.close()
        conn.close()
        return render_page(f"<p>Error transferring credits: {e}</p><a href='/'>Back</a>")
    cur.close()
    conn.close()
    return render_page(f"<p>Transferred {amount} credits from player {from_id} to player {to_id}.</p><a href='/'>Back</a>")

if __name__ == "__main__":
    app.run(debug=True)
```